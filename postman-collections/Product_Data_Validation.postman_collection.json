{
	"info": {
		"_postman_id": "a4b8c2d0-fce4-4186-bcbb-b75e063293bf",
		"name": "Product_Data_Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33841208"
	},
	"item": [
		{
			"name": "Get categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the data from the response unpacked from json",
							"let responseData = pm.response.json();",
							"",
							"// Check that the status code is 200 (OK)",
							"pm.test('The status code of the response should be 200', () => {",
							"  pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"// Check that we have a response time of < 1 second",
							"pm.test('The response time should be below 1 second', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"// Check that there are at least 10 main categories (children)",
							"pm.test('There should be at least 10 main categories', () => {",
							"  pm.expect(responseData.children.length).to.be.at.least(10);",
							"});",
							"",
							"// Check that each main category has the properites title and url",
							"pm.test('Each main category should have the properties title and url', () => {",
							"    for(let category of responseData.children){",
							"        // an empty string is falsy -> convert to false using !!",
							"        // a string with content is truthy -> convert to true using !!",
							"        pm.expect(!!category.title).to.be.true;",
							"        pm.expect(!!category.url).to.be.true;",
							"        // check that datatype is string for both title and url",
							"        pm.expect(category.title).to.be.string;",
							"        pm.expect(category.url).to.be.string;",
							"    }",
							"});",
							"",
							"// Save the responseData as an environment variable",
							"pm.environment.set('categoryData', responseData);",
							"",
							"// A counter for products within a main category to fecth",
							"pm.variables.set('categoryCounter', 0);",
							"",
							"pm.variables.set('subCategoryCounter', 0);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set the domain",
							"pm.environment.set('domain', 'http://localhost:4000');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/leftMenu/categorytree",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Page Data Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// URL to get products from the category\r",
							"let categoryUrl = `${pm.environment.get('domain')}/api/c/kott-chark-och-fagel?size=30`;\r",
							"\r",
							"// Check if there is a saved list of products\r",
							"let productsOfCategory = pm.environment.get('productsOfCategory');\r",
							"let productCounter = pm.environment.get('productCounter') || 0;\r",
							"\r",
							"// If the list of products has not been loaded yet, make a request and save it\r",
							"if (!productsOfCategory) {\r",
							"    pm.sendRequest({\r",
							"        url: categoryUrl,\r",
							"        method: 'GET'\r",
							"    }, function (err, res) {\r",
							"        if (!err) {\r",
							"            let responseData = res.json();\r",
							"            let products = responseData.results || [];\r",
							"            \r",
							"            // Save data of all products in the environment\r",
							"            pm.environment.set('productsOfCategory', JSON.stringify(products));\r",
							"            pm.environment.set('productCounter', 0); // Start from the first product\r",
							"\r",
							"            if (products.length > 0) {\r",
							"                // Set the first productCode\r",
							"                pm.environment.set('productCode', products[0].code);\r",
							"            } else {\r",
							"                console.log(\"No products found in the category.\");\r",
							"            }\r",
							"        }\r",
							"    });\r",
							"} else {\r",
							"    // Load the saved list of products and the current productCode\r",
							"    productsOfCategory = JSON.parse(productsOfCategory);\r",
							"    \r",
							"    if (productCounter < productsOfCategory.length) {\r",
							"        let productCode = productsOfCategory[productCounter].code;\r",
							"        pm.environment.set('productCode', productCode);\r",
							"    } else {\r",
							"        console.log(\"All products have been processed.\");\r",
							"        \r",
							"        // Clear variables after completion\r",
							"        pm.environment.unset('productsOfCategory');\r",
							"        pm.environment.unset('productCounter');\r",
							"        pm.environment.unset('productCode');\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testing for the presence of image and name\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Check for the presence of an image and URL as a string\r",
							"pm.test(\"Response should contain an image with a URL\", () => {\r",
							"    pm.expect(responseData.thumbnail).to.be.an(\"object\");\r",
							"    pm.expect(responseData.thumbnail.url).to.be.a(\"string\");\r",
							"    pm.expect(responseData.thumbnail.url).to.match(/^https?:\\/\\/.+$/); // URL validation\r",
							"});\r",
							"\r",
							"// Check that name exists and is a string\r",
							"pm.test(\"Response should contain a name as a string\", () => {\r",
							"    pm.expect(responseData.name).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// Move to the next product\r",
							"let productCounter = pm.environment.get('productCounter');\r",
							"let productsOfCategory = JSON.parse(pm.environment.get('productsOfCategory'));\r",
							"\r",
							"if (productCounter < productsOfCategory.length - 1) {\r",
							"    // Update the counter for the next product\r",
							"    pm.environment.set('productCounter', ++productCounter);\r",
							"    let nextProductCode = productsOfCategory[productCounter].code;\r",
							"    pm.environment.set('productCode', nextProductCode);\r",
							"    pm.execution.setNextRequest('Product Page Data Validation');\r",
							"} else {\r",
							"    console.log(\"All products have been processed.\");\r",
							"    \r",
							"    // Clear variables after completion\r",
							"    pm.environment.unset('productsOfCategory');\r",
							"    pm.environment.unset('productCounter');\r",
							"    pm.environment.unset('productCode');\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/axfood/rest/p/{{productCode}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"axfood",
						"rest",
						"p",
						"{{productCode}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Data Validation in Main Categories (all pages)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Retrieve category data from environment variables\r",
							"let categories = pm.variables.get('categoryData');\r",
							"// console.log('Categories:', categories);\r",
							"\r",
							"// Check if categoryCounter is initialized in the environment\r",
							"let categoryCounter = pm.environment.get('categoryCounter');\r",
							"if (categoryCounter === undefined) {\r",
							"    categoryCounter = 0; \r",
							"    pm.environment.set('categoryCounter', categoryCounter); \r",
							"}\r",
							"// console.log('Category Counter:', categoryCounter);\r",
							"\r",
							"// Verify that categories and categoryCounter are valid\r",
							"if (!categories || !categories.children || categories.children.length === 0) {\r",
							"    console.error('Error: categories data is empty or malformed!');\r",
							"    return;\r",
							"}\r",
							"\r",
							"if (categoryCounter >= categories.children.length) {\r",
							"    // console.log(\"All categories have been processed.\");\r",
							"    pm.execution.setNextRequest(null);  // End if no more categories\r",
							"} else {\r",
							"    // Retrieve the URL part for the current category and set it as an environment variable\r",
							"    let urlCategoryPart = categories.children[categoryCounter].url;\r",
							"    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
							"\r",
							"    // Initialize pageNumber only once at the beginning of each category\r",
							"    if (!pm.environment.get(\"pageNumber\")) {\r",
							"        pm.environment.set(\"pageNumber\", 0);\r",
							"        console.log(\"Page number initialized to 0 for new category.\");\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"let products = responseData.results;\r",
							"let categories = pm.variables.get('categoryData');\r",
							"let categoryCounter = pm.environment.get('categoryCounter');\r",
							"\r",
							"let currentPage = pm.environment.get(\"pageNumber\");\r",
							"let totalPages = responseData.pagination.numberOfPages;\r",
							"\r",
							"let currentMainCategory = categories.children[categoryCounter];\r",
							"console.log('Current Main Category:', currentMainCategory.title);\r",
							"\r",
							"// pm.test('The status code of the response should be 200', () => {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"// pm.test('The response time should be below 1 second', () => {\r",
							"//     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"// });\r",
							"\r",
							"pm.test(`Products on page ${currentPage} in category ${currentMainCategory.title} should contain mandatory fields and correctly structured data`, () => {\r",
							"    let allProductsValid = true; // Flag to check the validity of all products\r",
							"    let invalidProducts = [];   // List of invalid products\r",
							"\r",
							"    responseData.results.forEach((product, index) => {\r",
							"        try {\r",
							"            // Check mandatory fields\r",
							"            pm.expect(product).to.have.property('name');\r",
							"            pm.expect(product).to.have.property('price');\r",
							"            pm.expect(product).to.have.property('priceValue');\r",
							"            pm.expect(product).to.have.property('code');\r",
							"            // pm.expect(product).to.have.property('image');\r",
							"            pm.expect(product).to.have.property('thumbnail');\r",
							"\r",
							"            // Validate data types\r",
							"            pm.expect(product.name).to.be.a('string');\r",
							"            pm.expect(product.price).to.be.a('string');\r",
							"            pm.expect(product.priceValue).to.be.a('number');\r",
							"            pm.expect(product.code).to.be.a('string');\r",
							"            pm.expect(product.online).to.be.a('boolean');\r",
							"            pm.expect(product.outOfStock).to.be.a('boolean');\r",
							"\r",
							"            // Check the structure of 'image' and 'thumbnail'\r",
							"            // pm.expect(product.image).to.be.an('object');\r",
							"            // pm.expect(product.image).to.have.property('url').that.is.a('string');\r",
							"            // pm.expect(product.image).to.have.property('imageType').that.is.a('string');\r",
							"            pm.expect(product.thumbnail).to.be.an('object');\r",
							"            pm.expect(product.thumbnail).to.have.property('url').that.is.a('string');\r",
							"\r",
							"            // Ensure 'labels' contains only strings\r",
							"            if (product.labels) {\r",
							"                pm.expect(product.labels).to.be.an('array');\r",
							"                product.labels.forEach(label => pm.expect(label).to.be.a('string'));\r",
							"            }\r",
							"        } catch (err) {\r",
							"            // If the product is invalid, add it to the list\r",
							"            allProductsValid = false;\r",
							"            invalidProducts.push({\r",
							"                index: index + 1,\r",
							"                product,\r",
							"                error: err.message\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"    // Log for the entire page\r",
							"    if (allProductsValid) {\r",
							"        // console.log(`All products on page ${currentPage} in category \"${currentMainCategory.title}\" are valid.`);\r",
							"    } else {\r",
							"        // Log errors: display details about invalid products\r",
							"        console.error(`Errors found in products on page ${currentPage} in category \"${currentMainCategory.title}\":`, invalidProducts);\r",
							"    }\r",
							"    // Ensure all products are valid\r",
							"    pm.expect(allProductsValid).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"// Logic for switching pages and categories\r",
							"if (currentPage < totalPages - 1) {\r",
							"    // If there is a next page, increase pageNumber and go to it\r",
							"    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
							"    pm.execution.setNextRequest(\"Product Data Validation in Main Categories (all pages)\");\r",
							"} else {\r",
							"    // If this is the last page of the current category, reset pageNumber and switch to the next category\r",
							"    console.log(\"All pages in this category have been processed.\");\r",
							"    pm.environment.unset(\"pageNumber\"); // Reset page number for the new category\r",
							"\r",
							"    // Check if there is a next category\r",
							"    if (categories.children[categoryCounter + 1]) {\r",
							"        // console.log(\"Switching to the next category...\");\r",
							"        pm.environment.set('categoryCounter', categoryCounter + 1); // Increase categoryCounter\r",
							"        pm.execution.setNextRequest('Product Data Validation in Main Categories (all pages)');  // Request the next category\r",
							"    } else {\r",
							"        // If no more categories, end the test\r",
							"        console.log(\"All categories have been processed.\");\r",
							"        pm.environment.unset('categoryCounter');  \r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=topRated",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "100"
						},
						{
							"key": "page",
							"value": "{{pageNumber}}"
						},
						{
							"key": "sort",
							"value": "topRated"
						}
					]
				}
			},
			"response": []
		}
	]
}