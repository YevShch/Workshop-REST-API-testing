{
	"info": {
		"_postman_id": "d071368d-f498-4051-9bed-04554c80d162",
		"name": "Pagination",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33841208"
	},
	"item": [
		{
			"name": "Get categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the data from the response unpacked from json",
							"let responseData = pm.response.json();",
							"",
							"// Check that the status code is 200 (OK)",
							"pm.test('The status code of the response should be 200', () => {",
							"  pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"// Check that we have a response time of < 1 second",
							"pm.test('The response time should be below 1 second', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"// Check that there are at least 10 main categories (children)",
							"pm.test('There should be at least 10 main categories', () => {",
							"  pm.expect(responseData.children.length).to.be.at.least(10);",
							"});",
							"",
							"// Check that each main category has the properites title and url",
							"pm.test('Each main category should have the properties title and url', () => {",
							"    for(let category of responseData.children){",
							"        // an empty string is falsy -> convert to false using !!",
							"        // a string with content is truthy -> convert to true using !!",
							"        pm.expect(!!category.title).to.be.true;",
							"        pm.expect(!!category.url).to.be.true;",
							"        // check that datatype is string for both title and url",
							"        pm.expect(category.title).to.be.string;",
							"        pm.expect(category.url).to.be.string;",
							"    }",
							"});",
							"",
							"// Save the responseData as an environment variable",
							"pm.environment.set('categoryData', responseData);",
							"",
							"// A counter for products within a main category to fecth",
							"pm.variables.set('categoryCounter', 0);",
							"",
							"pm.variables.set('subCategoryCounter', 0);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set the domain",
							"pm.environment.set('domain', 'http://localhost:4000');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/leftMenu/categorytree",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product List and Pagination Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Unpack category data from environment variable as JSON",
							"let categories = pm.variables.get('categoryData');",
							"",
							"// Get the category counter and convert it to a number",
							"let categoryCounter = Number(pm.variables.get('categoryCounter')) || 0;",
							"",
							"// Ensure the current category exists before proceeding",
							"if (categories.children && categories.children[categoryCounter]) {",
							"    // Set the URL part for the current category",
							"    let urlCategoryPart = categories.children[categoryCounter].url;",
							"",
							"    // Skip the category \"lotter\"",
							"    if (urlCategoryPart === 'lotter') {",
							"        console.log('Skipping category: lotter');",
							"        // Increase the category counter to move to the next category",
							"        pm.variables.set('categoryCounter', categoryCounter + 1);  ",
							"    } else {",
							"        // Process the current category",
							"        pm.environment.set('urlCategoryPart', urlCategoryPart);",
							"        // Increase the category counter for the next request",
							"        pm.variables.set('categoryCounter', categoryCounter + 1);",
							"    }",
							"} else {",
							"    console.log('All categories have been processed.');",
							"    pm.environment.unset('categoryCounter'); // Clear counter after last category",
							"    pm.environment.unset('urlCategoryPart'); // Clear URL part",
							"   ",
							"}",
							"",
							"// Set page size for the request",
							"pm.variables.set('pageSize', 20);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack category data from environment variable as JSON",
							"let categories = pm.variables.get('categoryData');",
							"",
							"// Get the current category counter",
							"let categoryCounter = Number(pm.variables.get('categoryCounter')) || 0;",
							"",
							"// Test that the status code is 200 (OK)",
							"pm.test('The status code of the response should be 200', () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// Test that the response time is below 1 second",
							"pm.test('The response time should be below 1 second', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// Parse the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that there is the expected number of products on the page",
							"pm.test(`There should be exactly ${pm.variables.get('pageSize')} products on the page`, () => {",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    pm.expect(responseData.results.length).to.eql(pm.variables.get('pageSize'));",
							"});",
							"",
							"// Validate pagination data if it exists",
							"pm.test('Pagination data should be valid', () => {",
							"    pm.expect(responseData.pagination).to.be.an('object'); // Ensure pagination data exists",
							"    pm.expect(responseData.pagination.pageSize).to.eql(pm.variables.get('pageSize'));",
							"    pm.expect(responseData.pagination.currentPage).to.be.a('number');",
							"    pm.expect(responseData.pagination.numberOfPages).to.be.above(0);",
							"    pm.expect(responseData.pagination.totalNumberOfResults).to.be.a('number');",
							"    pm.expect(responseData.pagination.totalNumberOfResults).to.be.above(0);",
							"});",
							"",
							"// Check if we should proceed with the next category",
							"if (categories.children && categories.children[categoryCounter]) {",
							"    // Set up the next request with the updated URL part",
							"    pm.execution.setNextRequest('Product List and Pagination Validation');",
							"} else {",
							"    console.log('All categories have been processed or the category is excluded.');",
							"    pm.environment.unset('categoryCounter'); // Clear the counter if finished",
							"    pm.environment.unset('urlCategoryPart'); // Clear URL part",
							"} ",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size={{pageSize}}&page=0&sort=topRated",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "{{pageSize}}"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "topRated"
						}
					]
				}
			},
			"response": []
		}
	]
}