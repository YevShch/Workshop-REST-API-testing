{
	"info": {
		"_postman_id": "d071368d-f498-4051-9bed-04554c80d162",
		"name": "Pagination",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33841208"
	},
	"item": [
		{
			"name": "Get categories Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the data from the response unpacked from json",
							"let responseData = pm.response.json();",
							"",
							"// Check that the status code is 200 (OK)",
							"pm.test('The status code of the response should be 200', () => {",
							"  pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"// Check that we have a response time of < 1 second",
							"pm.test('The response time should be below 1 second', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"})",
							"",
							"// Check that there are at least 10 main categories (children)",
							"pm.test('There should be at least 10 main categories', () => {",
							"  pm.expect(responseData.children.length).to.be.at.least(10);",
							"});",
							"",
							"// Check that each main category has the properites title and url",
							"pm.test('Each main category should have the properties title and url', () => {",
							"    for(let category of responseData.children){",
							"        // an empty string is falsy -> convert to false using !!",
							"        // a string with content is truthy -> convert to true using !!",
							"        pm.expect(!!category.title).to.be.true;",
							"        pm.expect(!!category.url).to.be.true;",
							"        // check that datatype is string for both title and url",
							"        pm.expect(category.title).to.be.string;",
							"        pm.expect(category.url).to.be.string;",
							"    }",
							"});",
							"",
							"// Save the responseData as an environment variable",
							"pm.environment.set('categoryData', responseData);",
							"",
							"// A counter for products within a main category to fecth",
							"pm.variables.set('categoryCounter', 0);",
							"",
							"pm.variables.set('subCategoryCounter', 0);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set the domain",
							"pm.environment.set('domain', 'http://localhost:4000');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/leftMenu/categorytree",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product List by Category with Custom Page Size",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Unpack category data from environment variable as JSON",
							"let categories = pm.variables.get('categoryData');",
							"",
							"// Get the category counter and convert it to a number",
							"let categoryCounter = Number(pm.variables.get('categoryCounter')) || 0;",
							"",
							"// Ensure the current category exists before proceeding",
							"if (categories.children && categories.children[categoryCounter]) {",
							"    // Set the URL part for the current category",
							"    let urlCategoryPart = categories.children[categoryCounter].url;",
							"    pm.environment.set('urlCategoryPart', urlCategoryPart);",
							"    ",
							"    // Increase the category counter for the next request",
							"    pm.variables.set('categoryCounter', categoryCounter + 1);",
							"} else {",
							"    console.log('All categories have been processed.');",
							"    pm.environment.unset('categoryCounter'); // Clear counter after last category",
							"    pm.environment.unset('urlCategoryPart'); // Clear URL part",
							"    pm.execution.stop(); // Stop further requests",
							"}",
							"",
							"// Set page size for the request",
							"pm.variables.set('pageSize', 2);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unpack category data from environment variable as JSON",
							"let categories = pm.variables.get('categoryData');",
							"// Get the current category counter",
							"let categoryCounter = Number(pm.variables.get('categoryCounter')) || 0;",
							"",
							"// Test that the status code is 200 (OK)",
							"pm.test('The status code of the response should be 200', () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// Test that the response time is below 1 second",
							"pm.test('The response time should be below 1 second', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// Test that there is at least one product in the main category",
							"let responseData = pm.response.json();",
							"pm.test('There should be at least one product in a main category', () => {",
							"    pm.expect(responseData.results.length).to.be.at.least(1);",
							"});",
							"",
							"// Test for exact product count on the page",
							"pm.test(`There should be exactly ${pm.variables.get('pageSize')} products on the page`, () => {",
							"    pm.expect(responseData.results.length).to.eql(pm.variables.get('pageSize'));",
							"});",
							"",
							"// Check if we should proceed with the next category",
							"if (categories.children && categories.children[categoryCounter]) {",
							"    // Set up the next request with the updated URL part",
							"    pm.execution.setNextRequest('Get Product List by Category with Custom Page Size');",
							"} else {",
							"    console.log('All categories have been processed.');",
							"    pm.environment.unset('categoryCounter'); // Clear the counter if finished",
							"    pm.environment.unset('urlCategoryPart'); // Clear URL part",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size={{pageSize}}&page=0&sort=topRated",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "{{pageSize}}"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "topRated"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Pagination Test with Constant Page Size of 10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get JSON response\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Check response status\r",
							"pm.test('The status code of the response should be 200', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check response time\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Check that there are exactly 10 products on the page\r",
							"pm.test(`There should be exactly ${pm.environment.get('pageSize')} products on the page`, () => {\r",
							"    pm.expect(responseData.results.length).to.eql(pm.environment.get('pageSize'));\r",
							"});\r",
							"\r",
							"// Validate pagination data\r",
							"pm.test('Pagination should show correct page size and current page', () => {\r",
							"    pm.expect(responseData.pagination.pageSize).to.eql(pm.environment.get('pageSize'));\r",
							"    pm.expect(responseData.pagination.currentPage).to.be.a('number');\r",
							"    pm.expect(responseData.pagination.numberOfPages).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Validate that the total number of products matches the pagination data\r",
							"pm.test('Total number of products should match pagination', () => {\r",
							"    pm.expect(responseData.pagination.totalNumberOfResults).to.be.a('number');\r",
							"    pm.expect(responseData.pagination.totalNumberOfResults).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Logic for automatic pagination\r",
							"let currentPage = Number(pm.environment.get('currentPage')); // Convert to number for correct increment\r",
							"let numberOfPages = responseData.pagination.numberOfPages; // Total pages\r",
							"let totalNumberOfResults = responseData.pagination.totalNumberOfResults; // Total number of products\r",
							"\r",
							"// If the current page is less than the number of pages, continue\r",
							"if (currentPage < numberOfPages - 1) {\r",
							"    pm.environment.set('currentPage', currentPage + 1); // Increment page number\r",
							"    pm.execution.setNextRequest('Product Pagination Test with Constant Page Size of 10'); // Repeat the request\r",
							"} else {\r",
							"    console.log('All pages processed. Total number of products:', totalNumberOfResults);\r",
							"    pm.environment.unset('currentPage'); // Reset currentPage after processing is complete\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let categories = pm.variables.get('categoryData');\r",
							"\r",
							"// Get the category counter, and if it's not set, start from 0\r",
							"let categoryCounter = Number(pm.variables.get('categoryCounter')) || 0;\r",
							"\r",
							"// Check if the category exists\r",
							"if (categories.children && categories.children[categoryCounter]) {\r",
							"    // Set the category URL part as an environment variable\r",
							"    let urlCategory = categories.children[categoryCounter].url;\r",
							"    pm.environment.set('urlCategory', urlCategory);\r",
							"\r",
							"    // Increment the category counter for the next request\r",
							"    pm.variables.set('categoryCounter', categoryCounter + 1);\r",
							"} else {\r",
							"    console.log('All categories have been processed.');\r",
							"    pm.environment.unset('categoryCounter'); // Clear the category counter if all categories are processed\r",
							"    pm.environment.unset('urlCategory');     // Remove urlCategory to avoid errors\r",
							"   return;\r",
							"}\r",
							"\r",
							"// Set pagination parameters\r",
							"pm.environment.set('pageSize', 10);\r",
							"pm.environment.set('currentPage', Number(pm.environment.get('currentPage')) || 0); // Set page, converting to a number\r",
							"pm.environment.set('sortOrder', 'name-desc');\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategory}}?size={{pageSize}}&page={{currentPage}}&sort={{sortOrder}}\n",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategory}}"
					],
					"query": [
						{
							"key": "size",
							"value": "{{pageSize}}"
						},
						{
							"key": "page",
							"value": "{{currentPage}}"
						},
						{
							"key": "sort",
							"value": "{{sortOrder}}\n"
						}
					]
				}
			},
			"response": []
		}
	]
}