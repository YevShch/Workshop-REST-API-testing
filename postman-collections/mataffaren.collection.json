{
  "info": {
    "_postman_id": "b764f7b7-5136-4218-9d9e-1ecc6dbbc39a",
    "name": "All Tests of MataffÃ¤ren",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "33841208"
  },
  "item": [
    {
      "name": "All levels of categories",
      "item": [
        {
          "name": "Get categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Get the data from the response unpacked from json",
                  "let responseData = pm.response.json();",
                  "",
                  "// Check that the status code is 200 (OK)",
                  "pm.test('The status code of the response should be 200', () => {",
                  "  pm.expect(pm.response).to.have.status(200);",
                  "});",
                  "",
                  "// Check that we have a response time of < 1 second",
                  "pm.test('The response time should be below 1 second', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "})",
                  "",
                  "// Check that there are at least 10 main categories (children)",
                  "pm.test('There should be at least 10 main categories', () => {",
                  "  pm.expect(responseData.children.length).to.be.at.least(10);",
                  "});",
                  "",
                  "// Check that each main category has the properites title and url",
                  "pm.test('Each main category should have the properties title and url', () => {",
                  "    for(let category of responseData.children){",
                  "        // an empty string is falsy -> convert to false using !!",
                  "        // a string with content is truthy -> convert to true using !!",
                  "        pm.expect(!!category.title).to.be.true;",
                  "        pm.expect(!!category.url).to.be.true;",
                  "        // check that datatype is string for both title and url",
                  "        pm.expect(category.title).to.be.string;",
                  "        pm.expect(category.url).to.be.string;",
                  "    }",
                  "});",
                  "",
                  "// Save the responseData as an environment variable",
                  "pm.environment.set('categoryData', responseData);",
                  "",
                  "// A counter for products within a main category to fecth",
                  "pm.variables.set('categoryCounter', 0);",
                  "",
                  "pm.variables.set('subCategoryCounter', 0);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set the domain",
                  "pm.environment.set('domain', 'http://localhost:4000');"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/leftMenu/categorytree",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "leftMenu",
                "categorytree"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get productlist within category",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('domain', 'http://localhost:4000')",
                  "// Unpack from JSON all the categories",
                  "let categories = pm.variables.get('categoryData');",
                  "// Get the category counter and convert to number (using +)",
                  "let categoryCounter = pm.variables.get('categoryCounter');",
                  "",
                  "// Get the category part of the url and set it as an environment variable",
                  "let urlCategoryPart = categories.children[categoryCounter].url;",
                  "pm.environment.set('urlCategoryPart',urlCategoryPart);",
                  "",
                  "// Add 1 to the categoryCounter environment variable",
                  "pm.variables.set('categoryCounter', categoryCounter + 1);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Unpack from JSON all the categories",
                  "let categories = pm.variables.get('categoryData');",
                  "// Get the category counter and convert to number (using +)",
                  "let categoryCounter = pm.variables.get('categoryCounter');",
                  "",
                  "// Tests",
                  "",
                  "// Check that the status code is 200 (OK)",
                  "pm.test('The status code of the response should be 200', () => {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Check that we have a response time of < 1 second",
                  "pm.test('The response time should be below 1 second', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "// Check that we have at least one product in the this main category",
                  "let responseData = pm.response.json();",
                  "pm.test('There should be at least one product in a main category', () => {",
                  "    pm.expect(responseData.results.length).to.be.at.least(1);",
                  "});",
                  "",
                  "",
                  "// Repeat/loop this request until we have requested all main categories",
                  "if(categories.children[categoryCounter]){",
                  "  // Repeat this request (with new variable data for the url)",
                  "  pm.execution.setNextRequest('Get productlist within category');",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=topRated",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "30"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "sort",
                  "value": "topRated"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get product list within subcategory",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data and counters\r",
                  "let categories = pm.environment.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter') || 0;\r",
                  "let subCategoryCounter = pm.environment.get('subCategoryCounter') || 0;\r",
                  "\r",
                  "// Function to get current category based on counters\r",
                  "function getCurrentCategory() {\r",
                  "    let mainCat = categories.children[categoryCounter];\r",
                  "    let subCat = mainCat?.children[subCategoryCounter];\r",
                  "    return { mainCat, subCat };\r",
                  "}\r",
                  "\r",
                  "// Set URL and log current category path\r",
                  "let { mainCat, subCat } = getCurrentCategory();\r",
                  "pm.environment.set('urlCategoryPart', subCat?.url || mainCat?.url);\r",
                  "console.log('Current Main Category:', mainCat?.title, '| Current Subcategory:', subCat?.title);\r",
                  "\r",
                  "// Move to next main category if no subcategories are left\r",
                  "if (!subCat && categories.children[categoryCounter + 1]) {\r",
                  "    pm.environment.set('categoryCounter', categoryCounter + 1);\r",
                  "    pm.environment.set('subCategoryCounter', 0);\r",
                  "    pm.environment.set('urlCategoryPart', categories.children[categoryCounter + 1].url);\r",
                  "} else if (!subCat) {\r",
                  "    console.log('All categories and subcategories have been processed.');\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Retrieve category data and counters\r",
                  "let categories = pm.environment.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter') || 0;\r",
                  "let subCategoryCounter = pm.environment.get('subCategoryCounter') || 0;\r",
                  "\r",
                  "// Function to get current category based on counters\r",
                  "function getCurrentCategory() {\r",
                  "    let mainCat = categories.children[categoryCounter];\r",
                  "    let subCat = mainCat?.children[subCategoryCounter];\r",
                  "    return { mainCat, subCat };\r",
                  "}\r",
                  "\r",
                  "// Retrieve current categories and set URL\r",
                  "let { mainCat, subCat } = getCurrentCategory();\r",
                  "\r",
                  "// If there are no more categories, clear environment variables\r",
                  "if (!mainCat) {\r",
                  "    console.log(\"All categories processed.\");\r",
                  "    pm.environment.unset('categoryCounter');\r",
                  "    pm.environment.unset('subCategoryCounter');\r",
                  "    pm.environment.unset('urlCategoryPart');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "// Set the URL for the subcategory or main category\r",
                  "pm.environment.set('urlCategoryPart', subCat?.url || mainCat.url);\r",
                  "\r",
                  "// Response tests\r",
                  "pm.test('The status code of the response should be 200', () => pm.response.to.have.status(200));\r",
                  "pm.test('The response time should be below 1 second', () => pm.expect(pm.response.responseTime).to.be.below(1000));\r",
                  "let responseData = pm.response.json();\r",
                  "pm.test('There should be at least one product in this category', () => pm.expect(responseData.results.length).to.be.at.least(1));\r",
                  "\r",
                  "// Update counters for the next request\r",
                  "if (subCat && subCategoryCounter < mainCat.children.length - 1) {\r",
                  "    pm.environment.set('subCategoryCounter', subCategoryCounter + 1);\r",
                  "} else {\r",
                  "    pm.environment.set('categoryCounter', categoryCounter + 1);\r",
                  "    pm.environment.set('subCategoryCounter', 0);\r",
                  "}\r",
                  "\r",
                  "// Repeat the request\r",
                  "pm.execution.setNextRequest('Get product list within subcategory');\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=topRated",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "30"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "sort",
                  "value": "topRated"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get product list within third-level category",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data and current counters\r",
                  "let categories = pm.environment.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter') || 0;\r",
                  "let subCategoryCounter = pm.environment.get('subCategoryCounter') || 0;\r",
                  "let thirdLevelCategoryCounter = pm.environment.get('thirdLevelCategoryCounter') || 0;\r",
                  "\r",
                  "// Get current category, subcategory, and third-level category\r",
                  "let mainCat = categories.children[categoryCounter];\r",
                  "let subCat = mainCat?.children[subCategoryCounter];\r",
                  "let thirdCat = subCat?.children[thirdLevelCategoryCounter];\r",
                  "\r",
                  "// Set the URL for the current category or subcategory\r",
                  "let url = thirdCat?.url || subCat?.url || mainCat?.url;\r",
                  "pm.environment.set('urlCategoryPart', url);\r",
                  "\r",
                  "// Log category path\r",
                  "console.log('Current Category Path:', mainCat?.title, '>', subCat?.title, '>', thirdCat?.title);\r",
                  "\r",
                  "// Check if all categories are processed and unset the counters if so\r",
                  "if (!mainCat) {\r",
                  "    console.log('All categories processed.');\r",
                  "    pm.environment.unset('categoryCounter');\r",
                  "    pm.environment.unset('subCategoryCounter');\r",
                  "    pm.environment.unset('thirdLevelCategoryCounter');\r",
                  "    pm.environment.unset('urlCategoryPart');\r",
                  "     return;\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Retrieve category data and current counters\r",
                  "let categories = pm.environment.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter') || 0;\r",
                  "let subCategoryCounter = pm.environment.get('subCategoryCounter') || 0;\r",
                  "let thirdLevelCategoryCounter = pm.environment.get('thirdLevelCategoryCounter') || 0;\r",
                  "\r",
                  "// Get current category, subcategory, and third-level category\r",
                  "let mainCat = categories.children[categoryCounter];\r",
                  "let subCat = mainCat?.children[subCategoryCounter];\r",
                  "let thirdCat = subCat?.children[thirdLevelCategoryCounter];\r",
                  "\r",
                  "// Check if category exists\r",
                  "if (!mainCat) {\r",
                  "    console.log(\"All categories processed.\");\r",
                  "    pm.environment.unset('categoryCounter');\r",
                  "    pm.environment.unset('subCategoryCounter');\r",
                  "    pm.environment.unset('thirdLevelCategoryCounter');\r",
                  "    pm.environment.unset('urlCategoryPart');\r",
                  "    pm.execution.stop();\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "// Set URL for the category\r",
                  "pm.environment.set('urlCategoryPart', thirdCat?.url || subCat?.url || mainCat.url);\r",
                  "\r",
                  "// Response validation\r",
                  "pm.test('The status code of the response should be 200', () => pm.response.to.have.status(200));\r",
                  "pm.test('The response time should be below 1 second', () => pm.expect(pm.response.responseTime).to.be.below(1000));\r",
                  "pm.test('There should be at least one product in this category', () => pm.expect(pm.response.json().results.length).to.be.at.least(1));\r",
                  "\r",
                  "// Move to the next category/subcategory/third-level category\r",
                  "if (thirdCat && thirdLevelCategoryCounter < subCat.children.length - 1) {\r",
                  "    pm.environment.set('thirdLevelCategoryCounter', ++thirdLevelCategoryCounter);\r",
                  "} else if (subCat && subCategoryCounter < mainCat.children.length - 1) {\r",
                  "    pm.environment.set('subCategoryCounter', ++subCategoryCounter);\r",
                  "    pm.environment.set('thirdLevelCategoryCounter', 0);\r",
                  "} else if (categoryCounter < categories.children.length - 1) {\r",
                  "    pm.environment.set('categoryCounter', ++categoryCounter);\r",
                  "    pm.environment.set('subCategoryCounter', 0);\r",
                  "    pm.environment.set('thirdLevelCategoryCounter', 0);\r",
                  "} else {\r",
                  "    console.log(\"All categories processed.\");\r",
                  "    pm.environment.unset('categoryCounter');\r",
                  "    pm.environment.unset('subCategoryCounter');\r",
                  "    pm.environment.unset('thirdLevelCategoryCounter');\r",
                  "    pm.environment.unset('urlCategoryPart');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "// Proceed with the next request\r",
                  "pm.execution.setNextRequest('Get product list within third-level category');\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=30&page=0&sort=topRated",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "30"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "sort",
                  "value": "topRated"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sorting",
      "item": [
        {
          "name": "Verify Products Sorted by Top Rated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData = pm.response.json();\r",
                  "let products = responseData.results;\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "\r",
                  "// Check that the sort parameter is set to \"topRated\"\r",
                  "pm.test('Sort parameter should be set to topRated', () => {\r",
                  "    pm.expect(responseData.pagination.sort).to.eql('topRated');\r",
                  "});\r",
                  "\r",
                  "// Check that products are sorted by \"ranking\" in descending order\r",
                  "pm.test('Products should be sorted by top rating (ranking in descending order)', () => {\r",
                  "    for (let i = 0; i < products.length - 1; i++) {\r",
                  "        let currentRanking = products[i].ranking;\r",
                  "        let nextRanking = products[i + 1].ranking;\r",
                  "        pm.expect(currentRanking).to.be.at.least(nextRanking, `Product at index ${i} has a higher ranking than product at index ${i + 1}`);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Logic for switching pages and categories\r",
                  "let currentPage = pm.environment.get(\"pageNumber\");\r",
                  "let totalPages = responseData.pagination.numberOfPages;\r",
                  "\r",
                  "if (currentPage < totalPages - 1) {\r",
                  "    // If there is a next page, increase pageNumber and go to it\r",
                  "    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
                  "    pm.execution.setNextRequest(\"Verify Products Sorted by Top Rated\");\r",
                  "} else {\r",
                  "    // If this is the last page of the current category, reset pageNumber and switch to the next category\r",
                  "    console.log(\"All pages in this category have been processed.\");\r",
                  "    pm.environment.unset(\"pageNumber\"); // Reset page number for the new category\r",
                  "\r",
                  "    // Check if there is a next category\r",
                  "    if (categories.children[categoryCounter + 1]) {\r",
                  "        console.log(\"Switching to the next category...\");\r",
                  "        pm.environment.set('categoryCounter', categoryCounter + 1); // Increase categoryCounter\r",
                  "        pm.execution.setNextRequest('Verify Products Sorted by Top Rated');  // Request the next category\r",
                  "    } else {\r",
                  "        // If no more categories, end the test\r",
                  "        console.log(\"All categories have been processed.\");\r",
                  "        pm.environment.unset('categoryCounter');  \r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data from environment variables\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "// console.log('Categories:', categories);\r",
                  "\r",
                  "// Check if categoryCounter is initialized in the environment\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "if (categoryCounter === undefined) {\r",
                  "    categoryCounter = 0; \r",
                  "    pm.environment.set('categoryCounter', categoryCounter); \r",
                  "}\r",
                  "// console.log('Category Counter:', categoryCounter);\r",
                  "\r",
                  "// Verify that categories and categoryCounter are valid\r",
                  "if (!categories || !categories.children || categories.children.length === 0) {\r",
                  "    console.error('Error: categories data is empty or malformed!');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "if (categoryCounter >= categories.children.length) {\r",
                  "    console.log(\"All categories have been processed.\");\r",
                  "    pm.execution.setNextRequest(null);  // End if no more categories\r",
                  "} else {\r",
                  "    // Retrieve the URL part for the current category and set it as an environment variable\r",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;\r",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "    console.log('URL Part for current category:', urlCategoryPart);\r",
                  "\r",
                  "    // Initialize pageNumber only once at the beginning of each category\r",
                  "    if (!pm.environment.get(\"pageNumber\")) {\r",
                  "        pm.environment.set(\"pageNumber\", 0);\r",
                  "        console.log(\"Page number initialized to 0 for new category.\");\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=topRated",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "{{pageNumber}}"
                },
                {
                  "key": "sort",
                  "value": "topRated"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Products Sorted by Name Ascending",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data from environment variables\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "// console.log('Categories:', categories);\r",
                  "\r",
                  "// Check if categoryCounter is initialized in the environment\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "if (categoryCounter === undefined) {\r",
                  "    categoryCounter = 0; \r",
                  "    pm.environment.set('categoryCounter', categoryCounter); \r",
                  "}\r",
                  "// console.log('Category Counter:', categoryCounter);\r",
                  "\r",
                  "// Verify that categories and categoryCounter are valid\r",
                  "if (!categories || !categories.children || categories.children.length === 0) {\r",
                  "    console.error('Error: categories data is empty or malformed!');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "if (categoryCounter >= categories.children.length) {\r",
                  "    console.log(\"All categories have been processed.\");\r",
                  "    pm.execution.setNextRequest(null);  // End if no more categories\r",
                  "} else {\r",
                  "    // Retrieve the URL part for the current category and set it as an environment variable\r",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;\r",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "    console.log('URL Part for current category:', urlCategoryPart);\r",
                  "\r",
                  "    // Initialize pageNumber only once at the beginning of each category\r",
                  "    if (!pm.environment.get(\"pageNumber\")) {\r",
                  "        pm.environment.set(\"pageNumber\", 0);\r",
                  "        console.log(\"Page number initialized to 0 for new category.\");\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData = pm.response.json();\r",
                  "let products = responseData.results;\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "\r",
                  "// Check that the sort parameter is set to \"name-asc\"\r",
                  "pm.test('Sort parameter should be set to name-asc', () => {\r",
                  "    let selectedSort = responseData.sorts.find(sort => sort.code === 'name-asc');\r",
                  "    pm.expect(selectedSort.selected).to.be.true;\r",
                  "});\r",
                  "\r",
                  "// Check that products are sorted by \"name\" field in ascending order\r",
                  "pm.test('Products should be sorted by name in ascending order (AâZ)', () => {\r",
                  "    for (let i = 0; i < products.length - 1; i++) {\r",
                  "        let currentName = products[i].name.toLowerCase();\r",
                  "        let nextName = products[i + 1].name.toLowerCase();\r",
                  "        pm.expect(currentName <= nextName, `Product at index ${i} with name \"${currentName}\" should be before product at index ${i + 1} with name \"${nextName}\"`);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Page and category navigation logic\r",
                  "let currentPage = pm.environment.get(\"pageNumber\");\r",
                  "let totalPages = responseData.pagination.numberOfPages;\r",
                  "\r",
                  "if (currentPage < totalPages - 1) {\r",
                  "    // If next page exists, increase pageNumber and set next request to the same category\r",
                  "    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
                  "    pm.execution.setNextRequest(\"Verify Products Sorted by Name Ascending\"); // Replace with actual request name\r",
                  "} else {\r",
                  "    // If this is the last page in the category, reset pageNumber and switch to the next category\r",
                  "    console.log(\"All pages in this category have been processed.\");\r",
                  "    pm.environment.unset(\"pageNumber\"); // Reset for the new category\r",
                  "    \r",
                  "    // Check if there is another category\r",
                  "    if (categories.children[categoryCounter + 1]) {\r",
                  "        console.log(\"Switching to the next category...\");\r",
                  "        pm.environment.set('categoryCounter', categoryCounter + 1); // Increment categoryCounter\r",
                  "        pm.execution.setNextRequest('Verify Products Sorted by Name Ascending');  // Set to the next category request\r",
                  "    } else {\r",
                  "        // If no more categories, end the test\r",
                  "        console.log(\"All categories have been processed.\");\r",
                  "        pm.environment.unset('categoryCounter');\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=name-asc",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "{{pageNumber}}"
                },
                {
                  "key": "sort",
                  "value": "name-asc"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Products Sorted by Name Descending",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data from environment variables\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "\r",
                  "// Check if categoryCounter is initialized in the environment\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "if (categoryCounter === undefined) {\r",
                  "    categoryCounter = 0; \r",
                  "    pm.environment.set('categoryCounter', categoryCounter); \r",
                  "}\r",
                  "\r",
                  "// Verify that categories and categoryCounter are valid\r",
                  "if (!categories || !categories.children || categories.children.length === 0) {\r",
                  "    console.error('Error: categories data is empty or malformed!');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "if (categoryCounter >= categories.children.length) {\r",
                  "    console.log(\"All categories have been processed.\");\r",
                  "    pm.execution.setNextRequest(null);  // End if no more categories\r",
                  "} else {\r",
                  "    // Retrieve the URL part for the current category and set it as an environment variable\r",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;\r",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "    console.log('URL Part for current category:', urlCategoryPart);\r",
                  "\r",
                  "    // Initialize pageNumber only once at the beginning of each category\r",
                  "    if (!pm.environment.get(\"pageNumber\")) {\r",
                  "        pm.environment.set(\"pageNumber\", 0);\r",
                  "        console.log(\"Page number initialized to 0 for new category.\");\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData = pm.response.json();\r",
                  "let products = responseData.results;\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "\r",
                  "// Check that the sort parameter is set to \"name-desc\"\r",
                  "pm.test('Sort parameter should be set to name-desc', () => {\r",
                  "    let selectedSort = responseData.sorts.find(sort => sort.code === 'name-desc');\r",
                  "    pm.expect(selectedSort.selected).to.be.true;\r",
                  "});\r",
                  "\r",
                  "// Check that products are sorted by \"name\" field in descending order (ZâA)\r",
                  "pm.test('Products should be sorted by name in descending order (ZâA)', () => {\r",
                  "    for (let i = 0; i < products.length - 1; i++) {\r",
                  "        let currentName = products[i].name.toLowerCase();\r",
                  "        let nextName = products[i + 1].name.toLowerCase();\r",
                  "        pm.expect(currentName >= nextName, `Product at index ${i} with name \"${currentName}\" should be after product at index ${i + 1} with name \"${nextName}\"`);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Page and category navigation logic\r",
                  "let currentPage = pm.environment.get(\"pageNumber\");\r",
                  "let totalPages = responseData.pagination.numberOfPages;\r",
                  "\r",
                  "if (currentPage < totalPages - 1) {\r",
                  "    // If next page exists, increase pageNumber and set next request to the same category\r",
                  "    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
                  "    pm.execution.setNextRequest(\"Verify Products Sorted by Name Descending\"); // Replace with actual request name\r",
                  "} else {\r",
                  "    // If this is the last page in the category, reset pageNumber and switch to the next category\r",
                  "    console.log(\"All pages in this category have been processed.\");\r",
                  "    pm.environment.unset(\"pageNumber\"); // Reset for the new category\r",
                  "    \r",
                  "    // Check if there is another category\r",
                  "    if (categories.children[categoryCounter + 1]) {\r",
                  "        console.log(\"Switching to the next category...\");\r",
                  "        pm.environment.set('categoryCounter', categoryCounter + 1); // Increment categoryCounter\r",
                  "        pm.execution.setNextRequest('Verify Products Sorted by Name Descending');  // Set to the next category request\r",
                  "    } else {\r",
                  "        // If no more categories, end the test\r",
                  "        console.log(\"All categories have been processed.\");\r",
                  "        pm.environment.unset('categoryCounter');\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=name-desc",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "{{pageNumber}}"
                },
                {
                  "key": "sort",
                  "value": "name-desc"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Products Sorted by Price Ascending",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data from environment variables\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "\r",
                  "// Check if categoryCounter is initialized in the environment\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "if (categoryCounter === undefined) {\r",
                  "    categoryCounter = 0; \r",
                  "    pm.environment.set('categoryCounter', categoryCounter); \r",
                  "}\r",
                  "\r",
                  "// Verify that categories and categoryCounter are valid\r",
                  "if (!categories || !categories.children || categories.children.length === 0) {\r",
                  "    console.error('Error: categories data is empty or malformed!');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "if (categoryCounter >= categories.children.length) {\r",
                  "    console.log(\"All categories have been processed.\");\r",
                  "    pm.execution.setNextRequest(null);  // End if no more categories\r",
                  "} else {\r",
                  "    // Retrieve the URL part for the current category and set it as an environment variable\r",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;\r",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "    console.log('URL Part for current category:', urlCategoryPart);\r",
                  "\r",
                  "    // Initialize pageNumber only once at the beginning of each category\r",
                  "    if (!pm.environment.get(\"pageNumber\")) {\r",
                  "        pm.environment.set(\"pageNumber\", 0);\r",
                  "        console.log(\"Page number initialized to 0 for new category.\");\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData = pm.response.json();\r",
                  "let products = responseData.results;\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "\r",
                  "// Check that the sort parameter is set to \"price-asc\"\r",
                  "pm.test('Sort parameter should be set to price-asc', () => {\r",
                  "    let selectedSort = responseData.sorts.find(sort => sort.code === 'price-asc');\r",
                  "    pm.expect(selectedSort.selected).to.be.true;\r",
                  "});\r",
                  "\r",
                  "// Check that products are sorted by \"priceValue\" field in ascending order\r",
                  "pm.test('Products should be sorted by price in ascending order (cheapest to most expensive)', () => {\r",
                  "    for (let i = 0; i < products.length - 1; i++) {\r",
                  "        let currentPrice = products[i].priceValue;\r",
                  "        let nextPrice = products[i + 1].priceValue;\r",
                  "        pm.expect(currentPrice).to.be.at.most(nextPrice, `Product at index ${i} with price ${currentPrice} should be before product at index ${i + 1} with price ${nextPrice}`);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Page and category navigation logic\r",
                  "let currentPage = pm.environment.get(\"pageNumber\");\r",
                  "let totalPages = responseData.pagination.numberOfPages;\r",
                  "\r",
                  "if (currentPage < totalPages - 1) {\r",
                  "    // If next page exists, increase pageNumber and set next request to the same category\r",
                  "    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
                  "    pm.execution.setNextRequest(\"Verify Products Sorted by Price Ascending\"); // Replace with actual request name\r",
                  "} else {\r",
                  "    // If this is the last page in the category, reset pageNumber and switch to the next category\r",
                  "    console.log(\"All pages in this category have been processed.\");\r",
                  "    pm.environment.unset(\"pageNumber\"); // Reset for the new category\r",
                  "    \r",
                  "    // Check if there is another category\r",
                  "    if (categories.children[categoryCounter + 1]) {\r",
                  "        console.log(\"Switching to the next category...\");\r",
                  "        pm.environment.set('categoryCounter', categoryCounter + 1); // Increment categoryCounter\r",
                  "        pm.execution.setNextRequest('Verify Products Sorted by Price Ascending');  // Set to the next category request\r",
                  "    } else {\r",
                  "        // If no more categories, end the test\r",
                  "        console.log(\"All categories have been processed.\");\r",
                  "         pm.environment.unset('categoryCounter');\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=price-asc",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "{{pageNumber}}"
                },
                {
                  "key": "sort",
                  "value": "price-asc"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Products Sorted by Price Descending",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data from environment variables\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "\r",
                  "// Check if categoryCounter is initialized in the environment\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "if (categoryCounter === undefined) {\r",
                  "    categoryCounter = 0; \r",
                  "    pm.environment.set('categoryCounter', categoryCounter); \r",
                  "}\r",
                  "\r",
                  "// Verify that categories and categoryCounter are valid\r",
                  "if (!categories || !categories.children || categories.children.length === 0) {\r",
                  "    console.error('Error: categories data is empty or malformed!');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "if (categoryCounter >= categories.children.length) {\r",
                  "    console.log(\"All categories have been processed.\");\r",
                  "    pm.execution.setNextRequest(null);  // End if no more categories\r",
                  "} else {\r",
                  "    // Retrieve the URL part for the current category and set it as an environment variable\r",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;\r",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "    console.log('URL Part for current category:', urlCategoryPart);\r",
                  "\r",
                  "    // Initialize pageNumber only once at the beginning of each category\r",
                  "    if (!pm.environment.get(\"pageNumber\")) {\r",
                  "        pm.environment.set(\"pageNumber\", 0);\r",
                  "        console.log(\"Page number initialized to 0 for new category.\");\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData = pm.response.json();\r",
                  "let products = responseData.results;\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "\r",
                  "// Check that the sort parameter is set to \"price-desc\"\r",
                  "pm.test('Sort parameter should be set to price-desc', () => {\r",
                  "    let selectedSort = responseData.sorts.find(sort => sort.code === 'price-desc');\r",
                  "    pm.expect(selectedSort.selected).to.be.true;\r",
                  "});\r",
                  "\r",
                  "// Check that products are sorted by \"priceValue\" field in descending order\r",
                  "pm.test('Products should be sorted by price in descending order (most expensive to cheapest)', () => {\r",
                  "    for (let i = 0; i < products.length - 1; i++) {\r",
                  "        let currentPrice = products[i].priceValue;\r",
                  "        let nextPrice = products[i + 1].priceValue;\r",
                  "        pm.expect(currentPrice).to.be.at.least(nextPrice, `Product at index ${i} with price ${currentPrice} should be before product at index ${i + 1} with price ${nextPrice}`);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Page and category navigation logic\r",
                  "let currentPage = pm.environment.get(\"pageNumber\");\r",
                  "let totalPages = responseData.pagination.numberOfPages;\r",
                  "\r",
                  "if (currentPage < totalPages - 1) {\r",
                  "    // If next page exists, increase pageNumber and set next request to the same category\r",
                  "    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
                  "    pm.execution.setNextRequest(\"Verify Products Sorted by Price Descending\"); // Replace with actual request name\r",
                  "} else {\r",
                  "    // If this is the last page in the category, reset pageNumber and switch to the next category\r",
                  "    console.log(\"All pages in this category have been processed.\");\r",
                  "    pm.environment.unset(\"pageNumber\"); // Reset for the new category\r",
                  "    \r",
                  "    // Check if there is another category\r",
                  "    if (categories.children[categoryCounter + 1]) {\r",
                  "        console.log(\"Switching to the next category...\");\r",
                  "        pm.environment.set('categoryCounter', categoryCounter + 1); // Increment categoryCounter\r",
                  "        pm.execution.setNextRequest('Verify Products Sorted by Price Descending');  // Set to the next category request\r",
                  "    } else {\r",
                  "        // If no more categories, end the test\r",
                  "        console.log(\"All categories have been processed.\");\r",
                  "        pm.environment.unset('categoryCounter');\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=price-desc",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "{{pageNumber}}"
                },
                {
                  "key": "sort",
                  "value": "price-desc"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Products Sorted by Compare Price Ascending",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data from environment variables\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "\r",
                  "// Check if categoryCounter is initialized in the environment\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "if (categoryCounter === undefined) {\r",
                  "    categoryCounter = 0; \r",
                  "    pm.environment.set('categoryCounter', categoryCounter); \r",
                  "}\r",
                  "\r",
                  "// Verify that categories and categoryCounter are valid\r",
                  "if (!categories || !categories.children || categories.children.length === 0) {\r",
                  "    console.error('Error: categories data is empty or malformed!');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "if (categoryCounter >= categories.children.length) {\r",
                  "    console.log(\"All categories have been processed.\");\r",
                  "    pm.execution.setNextRequest(null);  // End if no more categories\r",
                  "} else {\r",
                  "    // Retrieve the URL part for the current category and set it as an environment variable\r",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;\r",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "    console.log('URL Part for current category:', urlCategoryPart);\r",
                  "\r",
                  "    // Initialize pageNumber only once at the beginning of each category\r",
                  "    if (!pm.environment.get(\"pageNumber\")) {\r",
                  "        pm.environment.set(\"pageNumber\", 0);\r",
                  "        console.log(\"Page number initialized to 0 for new category.\");\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData = pm.response.json();\r",
                  "let products = responseData.results;\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "\r",
                  "// Check that the sort parameter is set to \"compareprice-asc\"\r",
                  "pm.test('Sort parameter should be set to compareprice-asc', () => {\r",
                  "    let selectedSort = responseData.sorts.find(sort => sort.code === 'compareprice-asc');\r",
                  "    pm.expect(selectedSort.selected).to.be.true;\r",
                  "});\r",
                  "\r",
                  "// Check that products are sorted by \"comparePrice\" field in ascending order (cheapest to most expensive)\r",
                  "pm.test('Products should be sorted by compare price in ascending order (cheapest to most expensive)', () => {\r",
                  "    for (let i = 0; i < products.length - 1; i++) {\r",
                  "        // Extract compare prices for the current and next product, converting from string to number\r",
                  "        let currentComparePrice = parseFloat(products[i].comparePrice.replace(',', '.'));\r",
                  "        let nextComparePrice = parseFloat(products[i + 1].comparePrice.replace(',', '.'));\r",
                  "\r",
                  "        pm.expect(currentComparePrice).to.be.at.most(nextComparePrice, \r",
                  "            `Product at index ${i} with compare price ${currentComparePrice} should be before product at index ${i + 1} with compare price ${nextComparePrice}`);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Page and category navigation logic\r",
                  "let currentPage = pm.environment.get(\"pageNumber\");\r",
                  "let totalPages = responseData.pagination.numberOfPages;\r",
                  "\r",
                  "if (currentPage < totalPages - 1) {\r",
                  "    // If next page exists, increase pageNumber and set next request to the same category\r",
                  "    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
                  "    pm.execution.setNextRequest(\"Verify Products Sorted by Compare Price Ascending\"); // Replace with actual request name\r",
                  "} else {\r",
                  "    // If this is the last page in the category, reset pageNumber and switch to the next category\r",
                  "    console.log(\"All pages in this category have been processed.\");\r",
                  "    pm.environment.unset(\"pageNumber\"); // Reset for the new category\r",
                  "    \r",
                  "    // Check if there is another category\r",
                  "    if (categories.children[categoryCounter + 1]) {\r",
                  "        console.log(\"Switching to the next category...\");\r",
                  "        pm.environment.set('categoryCounter', categoryCounter + 1); // Increment categoryCounter\r",
                  "        pm.execution.setNextRequest('Verify Products Sorted by Compare Price Ascending');  // Set to the next category request\r",
                  "    } else {\r",
                  "        // If no more categories, end the test\r",
                  "        console.log(\"All categories have been processed.\");\r",
                  "         pm.environment.unset('categoryCounter');\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=compareprice-asc",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "{{pageNumber}}"
                },
                {
                  "key": "sort",
                  "value": "compareprice-asc"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Products Sorted by Compare Price Descending",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Retrieve category data from environment variables\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "\r",
                  "// Check if categoryCounter is initialized in the environment\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "if (categoryCounter === undefined) {\r",
                  "    categoryCounter = 0; \r",
                  "    pm.environment.set('categoryCounter', categoryCounter); \r",
                  "}\r",
                  "\r",
                  "// Verify that categories and categoryCounter are valid\r",
                  "if (!categories || !categories.children || categories.children.length === 0) {\r",
                  "    console.error('Error: categories data is empty or malformed!');\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "if (categoryCounter >= categories.children.length) {\r",
                  "    console.log(\"All categories have been processed.\");\r",
                  "    pm.execution.setNextRequest(null);  // End if no more categories\r",
                  "} else {\r",
                  "    // Retrieve the URL part for the current category and set it as an environment variable\r",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;\r",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "    console.log('URL Part for current category:', urlCategoryPart);\r",
                  "\r",
                  "    // Initialize pageNumber only once at the beginning of each category\r",
                  "    if (!pm.environment.get(\"pageNumber\")) {\r",
                  "        pm.environment.set(\"pageNumber\", 0);\r",
                  "        console.log(\"Page number initialized to 0 for new category.\");\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData = pm.response.json();\r",
                  "let products = responseData.results;\r",
                  "let categories = pm.variables.get('categoryData');\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "\r",
                  "// Check that the sort parameter is set to \"compareprice-desc\"\r",
                  "pm.test('Sort parameter should be set to compareprice-desc', () => {\r",
                  "    let selectedSort = responseData.sorts.find(sort => sort.code === 'compareprice-desc');\r",
                  "    pm.expect(selectedSort.selected).to.be.true;\r",
                  "});\r",
                  "\r",
                  "// Check that products are sorted by \"comparePrice\" field in descending order (most expensive to cheapest)\r",
                  "pm.test('Products should be sorted by compare price in descending order (most expensive to cheapest)', () => {\r",
                  "    for (let i = 0; i < products.length - 1; i++) {\r",
                  "        // Extract compare prices for the current and next product, converting from string to number\r",
                  "        let currentComparePrice = parseFloat(products[i].comparePrice.replace(',', '.'));\r",
                  "        let nextComparePrice = parseFloat(products[i + 1].comparePrice.replace(',', '.'));\r",
                  "\r",
                  "        pm.expect(currentComparePrice).to.be.at.least(nextComparePrice, \r",
                  "            `Product at index ${i} with compare price ${currentComparePrice} should be before product at index ${i + 1} with compare price ${nextComparePrice}`);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Page and category navigation logic\r",
                  "let currentPage = pm.environment.get(\"pageNumber\");\r",
                  "let totalPages = responseData.pagination.numberOfPages;\r",
                  "\r",
                  "if (currentPage < totalPages - 1) {\r",
                  "    // If next page exists, increase pageNumber and set next request to the same category\r",
                  "    pm.environment.set(\"pageNumber\", currentPage + 1);\r",
                  "    pm.execution.setNextRequest(\"Verify Products Sorted by Compare Price Descending\"); // Replace with actual request name\r",
                  "} else {\r",
                  "    // If this is the last page in the category, reset pageNumber and switch to the next category\r",
                  "    console.log(\"All pages in this category have been processed.\");\r",
                  "    pm.environment.unset(\"pageNumber\"); // Reset for the new category\r",
                  "    \r",
                  "    // Check if there is another category\r",
                  "    if (categories.children[categoryCounter + 1]) {\r",
                  "        console.log(\"Switching to the next category...\");\r",
                  "        pm.environment.set('categoryCounter', categoryCounter + 1); // Increment categoryCounter\r",
                  "        pm.execution.setNextRequest('Verify Products Sorted by Compare Price Descending');  // Set to the next category request\r",
                  "    } else {\r",
                  "        // If no more categories, end the test\r",
                  "        console.log(\"All categories have been processed.\");\r",
                  "         pm.environment.unset('categoryCounter');\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page={{pageNumber}}&sort=compareprice-desc",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "{{pageNumber}}"
                },
                {
                  "key": "sort",
                  "value": "compareprice-desc"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Product Data Validation",
      "item": [
        {
          "name": "Product Data Validation in Subcategories",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Get the category tree from environment variables\r",
                  "let categories = pm.environment.get('categoryData');\r",
                  "\r",
                  "// Get the current main category and subcategory indices\r",
                  "let categoryCounter = pm.environment.get('categoryCounter');\r",
                  "let subCategoryCounter = pm.environment.get('subCategoryCounter');\r",
                  "\r",
                  "// Check if the current main category exists\r",
                  "let currentCategory = categories.children[categoryCounter];\r",
                  "\r",
                  "// Check if there are subcategories within the current main category\r",
                  "if (currentCategory && currentCategory.children && subCategoryCounter < currentCategory.children.length) {\r",
                  "    // Set the subcategory URL for the current request\r",
                  "    let subCategory = currentCategory.children[subCategoryCounter];\r",
                  "    pm.environment.set('urlCategoryPart', subCategory.url);\r",
                  "    \r",
                  "    // Log for debugging\r",
                  "    console.log('Current Main Category: ', currentCategory.title);\r",
                  "    console.log('Current Subcategory: ', subCategory.title);\r",
                  "    \r",
                  "} else if (categories.children[categoryCounter + 1]) {\r",
                  "    // If no more subcategories, move to the next main category\r",
                  "    pm.environment.set('categoryCounter', categoryCounter + 1);\r",
                  "    pm.environment.set('subCategoryCounter', 0); // Reset subcategory\r",
                  "    // Set URL for the new main category\r",
                  "    pm.environment.set('urlCategoryPart', categories.children[categoryCounter + 1].url);\r",
                  "} else {\r",
                  "    console.log('All categories and subcategories have been processed.');\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Retrieve JSON data with all categories from the environment\r",
                  "let categories = pm.environment.get('categoryData');\r",
                  "\r",
                  "// Get the current main and subcategory counters\r",
                  "let categoryCounter = pm.environment.get('categoryCounter') || 0;\r",
                  "let subCategoryCounter = pm.environment.get('subCategoryCounter') || 0;\r",
                  "\r",
                  "// Retrieve the current main category and subcategory\r",
                  "let currentMainCategory = categories.children[categoryCounter];\r",
                  "let currentSubCategory = currentMainCategory?.children[subCategoryCounter];\r",
                  "\r",
                  "// Check if the current main category or subcategory does not exist\r",
                  "if (!currentMainCategory) {\r",
                  "    console.log(\"All categories processed.\");\r",
                  "    pm.environment.unset('categoryCounter');\r",
                  "    pm.environment.unset('subCategoryCounter');\r",
                  "    pm.environment.unset('urlCategoryPart');\r",
                  "    return;\r",
                  "} \r",
                  "\r",
                  "if (!currentSubCategory) {\r",
                  "    // If there is no subcategory, move to the next main category\r",
                  "    categoryCounter++;\r",
                  "    subCategoryCounter = 0;\r",
                  "    currentMainCategory = categories.children[categoryCounter];\r",
                  "    currentSubCategory = currentMainCategory?.children[subCategoryCounter];\r",
                  "    if (!currentMainCategory) {\r",
                  "        console.log(\"All categories processed.\");\r",
                  "        pm.environment.unset('categoryCounter');\r",
                  "        pm.environment.unset('subCategoryCounter');\r",
                  "        pm.environment.unset('urlCategoryPart');\r",
                  "        return;\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "// Logs for the current main category and subcategory\r",
                  "console.log('Current Main Category:', currentMainCategory.title);\r",
                  "console.log('Current Subcategory:', currentSubCategory ? currentSubCategory.title : \"No subcategories\");\r",
                  "\r",
                  "// Set the URL for the subcategory or main category (if there are no subcategories)\r",
                  "let urlCategoryPart = currentSubCategory ? currentSubCategory.url : currentMainCategory.url;\r",
                  "pm.environment.set('urlCategoryPart', urlCategoryPart);\r",
                  "\r",
                  "// Response tests\r",
                  "\r",
                  "// Check that the response status is 200 (OK)\r",
                  "pm.test('The status code of the response should be 200', () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Check that the response time is below 1 second\r",
                  "pm.test('The response time should be below 1 second', () => {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Check that there is at least one product in the current category\r",
                  "let responseData = pm.response.json();\r",
                  "pm.test('There should be at least one product in this category', () => {\r",
                  "    pm.expect(responseData.results.length).to.be.at.least(1);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// Extended product validation checks\r",
                  "responseData.results.forEach( ( product, index ) => {\r",
                  "  // Check for mandatory fields in each product\r",
                  "  pm.test(`Product ${ index + 1 } should contain mandatory fields and correctly structure`, () => {\r",
                  "    pm.expect( product ).to.have.property( 'name' );\r",
                  "    pm.expect( product ).to.have.property( 'price' );\r",
                  "    pm.expect( product ).to.have.property( 'priceValue' );\r",
                  "    pm.expect( product ).to.have.property( 'code' );\r",
                  "    pm.expect( product ).to.have.property( 'image' );\r",
                  "    pm.expect( product ).to.have.property( 'thumbnail' );\r",
                  "    // Validate data types for each product\r",
                  "    pm.expect( product.name ).to.be.a( 'string' );\r",
                  "    pm.expect( product.price ).to.be.a( 'string' );\r",
                  "    pm.expect( product.priceValue ).to.be.a( 'number' );\r",
                  "    pm.expect( product.code ).to.be.a( 'string' );\r",
                  "    pm.expect( product.online ).to.be.a( 'boolean' );\r",
                  "    pm.expect( product.outOfStock ).to.be.a( 'boolean' );\r",
                  "    // Check the structure of 'image' and 'thumbnail' objects\r",
                  "    pm.expect( product.image ).to.be.an( 'object' );\r",
                  "    pm.expect( product.image ).to.have.property( 'url' ).that.is.a( 'string' );\r",
                  "    pm.expect( product.image ).to.have.property( 'imageType' ).that.is.a( 'string' );\r",
                  "    pm.expect( product.thumbnail ).to.be.an( 'object' );\r",
                  "    pm.expect( product.thumbnail ).to.have.property( 'url' ).that.is.a( 'string' );\r",
                  "\r",
                  "    // Validate the 'labels' array contains only strings\r",
                  "      if ( product.labels ) {\r",
                  "        pm.expect( product.labels ).to.be.an( 'array' );\r",
                  "        product.labels.forEach( label => pm.expect( label ).to.be.a( 'string' ) );\r",
                  "      }\r",
                  "  })\r",
                  "} );\r",
                  "// Logic to move to the next subcategory or main category\r",
                  "\r",
                  "if (currentSubCategory && subCategoryCounter < currentMainCategory.children.length - 1) {\r",
                  "    // If there are remaining subcategories, increment subCategoryCounter\r",
                  "    pm.environment.set('subCategoryCounter', subCategoryCounter + 1);\r",
                  "} else {\r",
                  "    // Move to the next main category if subcategories are finished\r",
                  "    pm.environment.set('categoryCounter', categoryCounter + 1);\r",
                  "    pm.environment.set('subCategoryCounter', 0); // Reset subcategory counter\r",
                  "}\r",
                  "\r",
                  "// Repeat the request\r",
                  "pm.execution.setNextRequest('Product Data Validation in Subcategories');\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=100&page=0&sort=topRated",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "sort",
                  "value": "topRated"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Product Page Data Validation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// URL to get products from the category\r",
                  "let categoryUrl = `${pm.environment.get('domain')}/api/c/kott-chark-och-fagel?size=30`;\r",
                  "\r",
                  "// Check if there is a saved list of products\r",
                  "let productsOfCategory = pm.environment.get('productsOfCategory');\r",
                  "let productCounter = pm.environment.get('productCounter') || 0;\r",
                  "\r",
                  "// If the list of products has not been loaded yet, make a request and save it\r",
                  "if (!productsOfCategory) {\r",
                  "    pm.sendRequest({\r",
                  "        url: categoryUrl,\r",
                  "        method: 'GET'\r",
                  "    }, function (err, res) {\r",
                  "        if (!err) {\r",
                  "            let responseData = res.json();\r",
                  "            let products = responseData.results || [];\r",
                  "            \r",
                  "            // Save data of all products in the environment\r",
                  "            pm.environment.set('productsOfCategory', JSON.stringify(products));\r",
                  "            pm.environment.set('productCounter', 0); // Start from the first product\r",
                  "\r",
                  "            if (products.length > 0) {\r",
                  "                // Set the first productCode\r",
                  "                pm.environment.set('productCode', products[0].code);\r",
                  "            } else {\r",
                  "                console.log(\"No products found in the category.\");\r",
                  "            }\r",
                  "        }\r",
                  "    });\r",
                  "} else {\r",
                  "    // Load the saved list of products and the current productCode\r",
                  "    productsOfCategory = JSON.parse(productsOfCategory);\r",
                  "    \r",
                  "    if (productCounter < productsOfCategory.length) {\r",
                  "        let productCode = productsOfCategory[productCounter].code;\r",
                  "        pm.environment.set('productCode', productCode);\r",
                  "    } else {\r",
                  "        console.log(\"All products have been processed.\");\r",
                  "        \r",
                  "        // Clear variables after completion\r",
                  "        pm.environment.unset('productsOfCategory');\r",
                  "        pm.environment.unset('productCounter');\r",
                  "        pm.environment.unset('productCode');\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Testing for the presence of image and name\r",
                  "let responseData = pm.response.json();\r",
                  "\r",
                  "// Check for the presence of an image and URL as a string\r",
                  "pm.test(\"Response should contain an image with a URL\", () => {\r",
                  "    pm.expect(responseData.thumbnail).to.be.an(\"object\");\r",
                  "    pm.expect(responseData.thumbnail.url).to.be.a(\"string\");\r",
                  "    pm.expect(responseData.thumbnail.url).to.match(/^https?:\\/\\/.+$/); // URL validation\r",
                  "});\r",
                  "\r",
                  "// Check that name exists and is a string\r",
                  "pm.test(\"Response should contain a name as a string\", () => {\r",
                  "    pm.expect(responseData.name).to.be.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// Move to the next product\r",
                  "let productCounter = pm.environment.get('productCounter');\r",
                  "let productsOfCategory = JSON.parse(pm.environment.get('productsOfCategory'));\r",
                  "\r",
                  "if (productCounter < productsOfCategory.length - 1) {\r",
                  "    // Update the counter for the next product\r",
                  "    pm.environment.set('productCounter', ++productCounter);\r",
                  "    let nextProductCode = productsOfCategory[productCounter].code;\r",
                  "    pm.environment.set('productCode', nextProductCode);\r",
                  "    pm.execution.setNextRequest('Product Page Data Validation');\r",
                  "} else {\r",
                  "    console.log(\"All products have been processed.\");\r",
                  "    \r",
                  "    // Clear variables after completion\r",
                  "    pm.environment.unset('productsOfCategory');\r",
                  "    pm.environment.unset('productCounter');\r",
                  "    pm.environment.unset('productCode');\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{domain}}/api/axfood/rest/p/{{productCode}}",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "axfood",
                "rest",
                "p",
                "{{productCode}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Pagination",
      "item": [
        {
          "name": "Product List and Pagination Validation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Unpack category data from environment variable as JSON",
                  "let categories = pm.variables.get('categoryData');",
                  "",
                  "// Get the category counter and convert it to a number",
                  "let categoryCounter = Number(pm.variables.get('categoryCounter')) || 0;",
                  "",
                  "// Ensure the current category exists before proceeding",
                  "if (categories.children && categories.children[categoryCounter]) {",
                  "    // Set the URL part for the current category",
                  "    let urlCategoryPart = categories.children[categoryCounter].url;",
                  "    pm.environment.set('urlCategoryPart', urlCategoryPart);",
                  "    ",
                  "    // Increase the category counter for the next request",
                  "    pm.variables.set('categoryCounter', categoryCounter + 1);",
                  "} else {",
                  "    console.log('All categories have been processed.');",
                  "    pm.environment.unset('categoryCounter'); // Clear counter after last category",
                  "    pm.environment.unset('urlCategoryPart'); // Clear URL part",
                  "    pm.execution.stop(); // Stop further requests",
                  "}",
                  "",
                  "// Set page size for the request",
                  "pm.variables.set('pageSize', 2);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Unpack category data from environment variable as JSON",
                  "let categories = pm.variables.get('categoryData');",
                  "// Get the current category counter",
                  "let categoryCounter = Number(pm.variables.get('categoryCounter')) || 0;",
                  "",
                  "// Test that the status code is 200 (OK)",
                  "pm.test('The status code of the response should be 200', () => {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test that the response time is below 1 second",
                  "pm.test('The response time should be below 1 second', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "// Parse the response data",
                  "let responseData = pm.response.json();",
                  "",
                  "// Test that there is the expected number of products on the page",
                  "pm.test(`There should be exactly ${pm.variables.get('pageSize')} products on the page`, () => {",
                  "    pm.expect(responseData.results).to.be.an('array');",
                  "    pm.expect(responseData.results.length).to.eql(pm.variables.get('pageSize'));",
                  "});",
                  "",
                  "// Validate pagination data if it exists",
                  "pm.test('Pagination data should be valid', () => {",
                  "    pm.expect(responseData.pagination).to.be.an('object'); // Ensure pagination data exists",
                  "    pm.expect(responseData.pagination.pageSize).to.eql(pm.variables.get('pageSize'));",
                  "    pm.expect(responseData.pagination.currentPage).to.be.a('number');",
                  "    pm.expect(responseData.pagination.numberOfPages).to.be.above(0);",
                  "    pm.expect(responseData.pagination.totalNumberOfResults).to.be.a('number');",
                  "    pm.expect(responseData.pagination.totalNumberOfResults).to.be.above(0);",
                  "});",
                  "// Check if we should proceed with the next category",
                  "if (categories.children && categories.children[categoryCounter]) {",
                  "    // Set up the next request with the updated URL part",
                  "    pm.execution.setNextRequest('Product List and Pagination Validation');",
                  "} else {",
                  "    console.log('All categories have been processed.');",
                  "    pm.environment.unset('categoryCounter'); // Clear the counter if finished",
                  "    pm.environment.unset('urlCategoryPart'); // Clear URL part",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}/api/c/{{urlCategoryPart}}?size={{pageSize}}&page=0&sort=topRated",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "api",
                "c",
                "{{urlCategoryPart}}"
              ],
              "query": [
                {
                  "key": "size",
                  "value": "{{pageSize}}"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "sort",
                  "value": "topRated"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
